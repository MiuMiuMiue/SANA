#!/bin/bash
CORES=$((${CORES:=`./scripts/cpus 2>/dev/null || echo 4`}-1))
PARALLEL="./parallel -s bash $CORES"  # run in parallel on jenkins
#PARALLEL=bash # if you don't have the parallel program
NUM_FAILS=0

die() { echo "ERROR: $@" >&2; exit 1
}

PATH="$PATH:`pwd`/scripts"
export PATH

TMPDIR=/tmp/regression-test$$
trap "/bin/rm -rf $TMPDIR" 0 1 2 3 15
mkdir $TMPDIR || die "couldn't create OutputDir $TMPDIR"

[ -d "$REG_DIR" ] || die "Expecting REG_DIR to be set"

OutputDir="$TMPDIR"
OutputFile="$TMPDIR/regression-test.result"
ErrorMargin="0.04"
#echo "WARNING: temporarily set error margin way too big while core scores are being tested"
CompareFile=""

RUN=true # use -n to turn off run and only compare

while getopts "b:e:o:c:n" opt; do
    case $opt in
    n)  RUN=false;;
    e)
        if [[ $OPTARG =~ "^[0.9]*.[0.9]\+$" ]]; then
            ErrorMargin=$OPTARG
        else
            echo "Argument for provided option -e is not a decimal number between 0-1" >&2
            exit 1
        fi
        ;;
    o)
        OutputFile=$OPTARG
        ;;
    c)
        CompareFile=$OPTARG
        ;;
    \?) 
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    :)
        echo "Option -$OPTARG requires an argument" >&2
        exit 1
        ;;
    esac
done

> "$OutputFile" # create empty file

if [ -z $CompareFile -a ! -f $CompareFile ]; then
    printf "Regression file specified: %s does not exists\n" "$CompareFile"
    exit 1
fi

NL='
'

# Alphabetical order--not particularly useful
#nets='AThaliana CElegans DMelanogaster HSapiens MMusculus RNorvegicus SCerevisiae SPombe'

# ordered by size in number of nodes
nets="`echo RNorvegicus SPombe CElegans MMusculus SCerevisiae AThaliana DMelanogaster HSapiens | newlines`"
export Networks_count=`echo $nets | wc -w`
#Biogrid_network="$nets" #`echo $nets | newlines | sed 's/$/.el/' | (cd networks; xargs ls -Sr) | sed 's/\.el$//'`

if $RUN; then
    case `hostname` in
    pisica3*) OLD_STEP=`cpu-step`; cpu-step 2500;; # time regressions at constant 2.5GHz on pisica3
    esac
    [ -x "$SANA_EXE" ] || die "can't find executable '$SANA_EXE'"
    echo "$nets" | awk '{net[NR-1]=$NF}END{for(i=NR-2;i>=0;i--)for(j=NR-1;j>=i+1;j--) printf "echo Running %s-%s; \"'"$SANA_EXE"'\" -itm 300 -s3 1 -g1 %s -g2 %s -o '$OutputDir'/%s-%s > '$OutputDir'/%s-%s.progress 2>&1\n",net[i],net[j],net[i],net[j],net[i],net[j],net[i],net[j]}' | eval $PARALLEL
    (( NUM_FAILS+=$? ))
    case `hostname` in
    pisica3*) cpu-step $OLD_STEP;;
    esac
fi

Iterations=""
echo "Checking Iterations Speed" >> $OutputFile
printf "%-30s | %-20s$NL" "Networks Pair" "Iterations Speed" >> $OutputFile
for i in $(seq 1 $((Networks_count - 1)));do
    for j in $(seq $((i + 1)) $Networks_count); do
	if [ "$i" -lt "$j" ]; then
	    Network1=`echo "$nets" | awk 'NR=='$i'{print}'`
	    Network2=`echo "$nets" | awk 'NR=='$j'{print}'`
	    progress="$OutputDir/$Network1-$Network2.progress"
	    cIt=`grep -o "[0-9]*.[0-9]* iterations per second" $progress | awk '{print $1}' | sort -u`
	    Iterations="$Iterations $cIt"
	    printf "%-30s | %-20s$NL" "$Network1-$Network2" "$cIt" >> $OutputFile
	fi
    done
done

IterationsAvg=`echo $Iterations | tr " " "$NL" | awk '{s+=$1}END{print s/NR}'`
IterationsAvg=`printf "%f" $IterationsAvg`
printf "Iterations /s Average: %s \n" "$IterationsAvg" >> $OutputFile

PrintTestScores()
{
    Scores=""
    printf "Checking %s score$NL" $1 >> $OutputFile
    printf "%-30s | %-20s$NL" "Networks Pair" "$1 score" >> $OutputFile
    for i in $(seq 1 $((Networks_count - 1)));do
        for j in $(seq $((i + 1)) $Networks_count); do
            Network1=`echo "$nets" | awk 'NR=='$i'{print}'`
            Network2=`echo "$nets" | awk 'NR=='$j'{print}'`
            progress="$OutputDir/$Network1-$Network2.out"
            Score=`grep -o "^$1: 0.[0-9]\+$" $progress | awk '{print $2}' | sort -u`
            Scores=$Scores" "$Score
            printf "%-30s | %-20s$NL" "$Network1-$Network2" "$Score" >> $OutputFile
        done
    done

    ScoresAvg=`echo $Scores | tr " " "$NL" | awk '{s+=$1}END{print s/NR}'`
    ScoresAvg=`printf "%f" $ScoresAvg`
    printf "$1 Score Average: %s$NL" "$ScoresAvg" >> $OutputFile
}

SCORES="ec ics s3 lccs sec"
for score in `echo $SCORES | tr ' ' "$NL" `; do
    PrintTestScores $score
done

if [ ! -z "$CompareFile" ]; then
    BaseAverages=`cat $CompareFile | grep "Average" | grep -o "[0-9]\+.[0-9]\+"`
    Names=`cat $CompareFile | grep "Average" | awk '{print $1}'`
    NewAverages=`cat $OutputFile | grep "Average" | grep -o "[0-9]\+.[0-9]\+"`
    for i in $(seq `echo $BaseAverages | wc -w`);do
        baseItem=`echo -e $BaseAverages | awk '{print $'$i'}'`
        newItem=`echo -e $NewAverages | awk '{print $'$i'}'`
        name=`echo -e $Names | awk '{print $'$i'}'`
        errorDif=`parse "($newItem - $baseItem)/$baseItem"`
	EXTRA_MARGIN=1
	echo -n "$name: ($newItem - $baseItem)/$baseItem, changeFrac: $errorDif, margin $ErrorMargin" >&2
	case $name in
	Iterations)
	    EXTRA_MARGIN=1000 # we don't care about iteration speed any more, just print it for informational purposes
	    echo -n " (no longer tracking iteration speed)" >&2
	    ;;
	esac
	echo "" # finish the "echo -n" line above
	errorDif=`parse "$errorDif/$EXTRA_MARGIN"`
        errorDif=`parse "ABS($errorDif)" | awk '{printf "%.16f\n",$1}'`
        if [[ `echo "$errorDif < $ErrorMargin" | bc -l` -eq 0 ]]; then
            touch $TMPDIR/failed
	    echo "$name failed error margin: ($newItem - $baseItem)/$baseItem has error difference '$errorDif < $ErrorMargin'" >&2
	    (( ++NUM_FAILS ))
        fi
    done
fi

echo encountered a total of $NUM_FAILS failures
exit $NUM_FAILS
