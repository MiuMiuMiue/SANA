#!/bin/sh
TMPDIR=/tmp/cpus.$$
trap "/bin/rm -rf $TMPDIR; exit" 0 1 2 3 15
mkdir $TMPDIR

die(){ echo "$USAGE${NL}FATAL ERROR in $BASENAME:" "$@" >&2; exit 1; }

load=0
VERBOSE=false
while [ $# -gt 0 ]; do
    case "$1" in
    -[Vv]*) VERBOSE=true; shift;;
    available) uptime > $TMPDIR/uptime
	load=`cat $TMPDIR/uptime | sed 's/.*load averages*://' -e 's/,//g' | newlines |
	    awk 'BEGIN{load=999999}{if(1*$1<load)load=1*$1}END{printf "%d\n", load}'`
	$VERBOSE && (cat $TMPDIR/uptime; echo load is $load) >&2
	shift
	;;
    *) die "unknown option '$1'" ;;
    esac
done

output(){ [ -f $TMPDIR/cpus ] && awk '{cpus=$1; av=(cpus-'"$load"'); printf "%d\n", (av<0)?0:av}' $TMPDIR/cpus && exit 0; }

# Most Linux machines:
lscpu >$TMPDIR/lscpu 2>/dev/null &&
    awk '/^CPU[(s)]*:/{cpus=$NF}END{if(cpus)print cpus; else exit 1}' $TMPDIR/lscpu > $TMPDIR/cpus && output

# MacOS:
([ `arch` = Darwin -o `uname` = Darwin ] || uname -a | grep Darwin >/dev/null) &&
    sysctl -n hw.ncpu > $TMPDIR/cpus && output

# Cygwin:
case `arch` in
CYGWIN*) grep -c '^processor[ 	]*:' /proc/cpuinfo; exit ;;
*) if [ -d /dev/cpu -a ! -f /dev/cpu/microcode ]; then
    ls -F /dev/cpu | fgrep -c > $TMPDIR/cpus && output
   fi
    ;;
esac

# Oops
echo "couldn't figure out number of CPUs" >&2; exit 1

